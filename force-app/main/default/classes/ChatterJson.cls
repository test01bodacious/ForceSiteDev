//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class ChatterJson {

    public class Page_Z {
       
        public Object currentPageToken {get;set;} 
        public String currentPageUrl {get;set;} 
        public List<PlatformActionGroups> items {get;set;} 
        public Object nextPageToken {get;set;} 
        public Object nextPageUrl {get;set;} 
        public Object previousPageToken {get;set;} 
        public Object previousPageUrl {get;set;} 
        public Integer total {get;set;} 

        public Page_Z(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String textt = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (textt == 'currentPageToken') {
                            currentPageToken = parser.readValueAs(Object.class);
                        } else if (textt == 'currentPageUrl') {
                            currentPageUrl = parser.getText();
                        } else if (textt == 'items') {
                            items = arrayOfPlatformActionGroups(parser);
                        } else if (textt == 'nextPageToken') {
                            nextPageToken = parser.readValueAs(Object.class);
                        } else if (textt == 'nextPageUrl') {
                            nextPageUrl = parser.readValueAs(Object.class);
                        } else if (textt == 'previousPageToken') {
                            previousPageToken = parser.readValueAs(Object.class);
                        } else if (textt == 'previousPageUrl') {
                            previousPageUrl = parser.readValueAs(Object.class);
                        } else if (textt == 'total') {
                            total = parser.getIntegerValue();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Page_Z consuming unrecognized property: '+textt);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class MessageSegments {
        public Object altText {get;set;} 
        public String htmlTag {get;set;} 
        public String markupType {get;set;} 
        public String text {get;set;} 
        public String type_Z {get;set;} // in json: type
        public Object url {get;set;} 

        public MessageSegments(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String textt = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (textt == 'altText') {
                            altText = parser.readValueAs(Object.class);
                        } else if (textt == 'htmlTag') {
                            htmlTag = parser.getText();
                        } else if (textt == 'markupType') {
                            markupType = parser.getText();
                        } else if (textt == 'text') {
                            text = parser.getText();
                        } else if (textt == 'type') {
                            type_Z = parser.getText();
                        } else if (textt == 'url') {
                            url = parser.readValueAs(Object.class);
                        } else {
                            System.debug(LoggingLevel.WARN, 'MessageSegments consuming unrecognized property: '+textt);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Bookmarks {
        public Boolean isBookmarkedByCurrentUser {get;set;} 

        public Bookmarks(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String textt = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (textt == 'isBookmarkedByCurrentUser') {
                            isBookmarkedByCurrentUser = parser.getBooleanValue();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Bookmarks consuming unrecognized property: '+textt);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Page_X {
        public Object currentPageToken {get;set;} 
        public String currentPageUrl {get;set;} 
        public List<Items_Z> items {get;set;} 
        public Object nextPageToken {get;set;} 
        public Object nextPageUrl {get;set;} 
        public Object previousPageToken {get;set;} 
        public Object previousPageUrl {get;set;} 
        public Integer total {get;set;} 

        public Page_X(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String textt = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (textt == 'currentPageToken') {
                            currentPageToken = parser.readValueAs(Object.class);
                        } else if (textt == 'currentPageUrl') {
                            currentPageUrl = parser.getText();
                        } else if (textt == 'items') {
                            items = arrayOfItems_Z(parser);
                        } else if (textt == 'nextPageToken') {
                            nextPageToken = parser.readValueAs(Object.class);
                        } else if (textt == 'nextPageUrl') {
                            nextPageUrl = parser.readValueAs(Object.class);
                        } else if (textt == 'previousPageToken') {
                            previousPageToken = parser.readValueAs(Object.class);
                        } else if (textt == 'previousPageUrl') {
                            previousPageUrl = parser.readValueAs(Object.class);
                        } else if (textt == 'total') {
                            total = parser.getIntegerValue();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Page_X consuming unrecognized property: '+textt);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class User {
        public Object additionalLabel {get;set;} 
        public String communityNickname {get;set;} 
        public Object companyName {get;set;} 
        public String displayName {get;set;} 
        public String firstName {get;set;} 
        public String id {get;set;} 
        public Boolean isActive {get;set;} 
        public Boolean isInThisCommunity {get;set;} 
        public String lastName {get;set;} 
        public Motif motif {get;set;} 
        public Object mySubscription {get;set;} 
        public String name {get;set;} 
        public OutOfOffice outOfOffice {get;set;} 
        public Photo photo {get;set;} 
        public Object reputation {get;set;} 
        public Object title {get;set;} 
        public String type_Z {get;set;} // in json: type
        public String url {get;set;} 
        public String userType {get;set;} 

        public User(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String textt = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (textt == 'additionalLabel') {
                            additionalLabel = parser.readValueAs(Object.class);
                        } else if (textt == 'communityNickname') {
                            communityNickname = parser.getText();
                        } else if (textt == 'companyName') {
                            companyName = parser.readValueAs(Object.class);
                        } else if (textt == 'displayName') {
                            displayName = parser.getText();
                        } else if (textt == 'firstName') {
                            firstName = parser.getText();
                        } else if (textt == 'id') {
                            id = parser.getText();
                        } else if (textt == 'isActive') {
                            isActive = parser.getBooleanValue();
                        } else if (textt == 'isInThisCommunity') {
                            isInThisCommunity = parser.getBooleanValue();
                        } else if (textt == 'lastName') {
                            lastName = parser.getText();
                        } else if (textt == 'motif') {
                            motif = new Motif(parser);
                        } else if (textt == 'mySubscription') {
                            mySubscription = parser.readValueAs(Object.class);
                        } else if (textt == 'name') {
                            name = parser.getText();
                        } else if (textt == 'outOfOffice') {
                            outOfOffice = new OutOfOffice(parser);
                        } else if (textt == 'photo') {
                            photo = new Photo(parser);
                        } else if (textt == 'reputation') {
                            reputation = parser.readValueAs(Object.class);
                        } else if (textt == 'title') {
                            title = parser.readValueAs(Object.class);
                        } else if (textt == 'type') {
                            type_Z = parser.getText();
                        } else if (textt == 'url') {
                            url = parser.getText();
                        } else if (textt == 'userType') {
                            userType = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'User consuming unrecognized property: '+textt);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Page_Y {
        public Object currentPageToken {get;set;} 
        public String currentPageUrl {get;set;} 
        public List<Items> items {get;set;} 
        public Object nextPageToken {get;set;} 
        public Object nextPageUrl {get;set;} 
        public Object previousPageToken {get;set;} 
        public Object previousPageUrl {get;set;} 
        public Integer total {get;set;} 

        public Page_Y(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String textt = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (textt == 'currentPageToken') {
                            currentPageToken = parser.readValueAs(Object.class);
                        } else if (textt == 'currentPageUrl') {
                            currentPageUrl = parser.getText();
                        } else if (textt == 'items') {
                            items = arrayOfItems(parser);
                        } else if (textt == 'nextPageToken') {
                            nextPageToken = parser.readValueAs(Object.class);
                        } else if (textt == 'nextPageUrl') {
                            nextPageUrl = parser.readValueAs(Object.class);
                        } else if (textt == 'previousPageToken') {
                            previousPageToken = parser.readValueAs(Object.class);
                        } else if (textt == 'previousPageUrl') {
                            previousPageUrl = parser.readValueAs(Object.class);
                        } else if (textt == 'total') {
                            total = parser.getIntegerValue();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Page_Y consuming unrecognized property: '+textt);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public Object currentPageToken {get;set;} 
    public String currentPageUrl {get;set;} 
    public List<Elements> elements {get;set;} 
    public Object isModifiedToken {get;set;} 
    public Object isModifiedUrl {get;set;} 
    public Object nextPageToken {get;set;} 
    public Object nextPageUrl {get;set;} 
    public String updatesToken {get;set;} 
    public String updatesUrl {get;set;} 

    public ChatterJson(JSONParser parser) {
        while (parser.nextToken() != System.JSONToken.END_OBJECT) {
            if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                String textt = (String)parser.getText();
                if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                    if (textt == 'currentPageToken') {
                        currentPageToken = parser.readValueAs(Object.class);
                    } else if (textt == 'currentPageUrl') {
                        currentPageUrl = parser.getText();
                    } else if (textt == 'elements') {
                        elements = arrayOfElements(parser);
                    } else if (textt == 'isModifiedToken') {
                        isModifiedToken = parser.readValueAs(Object.class);
                    } else if (textt == 'isModifiedUrl') {
                        isModifiedUrl = parser.readValueAs(Object.class);
                    } else if (textt == 'nextPageToken') {
                        nextPageToken = parser.readValueAs(Object.class);
                    } else if (textt == 'nextPageUrl') {
                        nextPageUrl = parser.readValueAs(Object.class);
                    } else if (textt == 'updatesToken') {
                        updatesToken = parser.getText();
                    } else if (textt == 'updatesUrl') {
                        updatesUrl = parser.getText();
                    } else {
                        System.debug(LoggingLevel.WARN, 'JSON2Apex consuming unrecognized property: '+textt);
                        consumeObject(parser);
                    }
                }
            }
        }
    }
    
    public class Comments_Z {
        public Page_X page {get;set;} 

        public Comments_Z(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String textt = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (textt == 'page') {
                            page = new Page_X(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'Comments_Z consuming unrecognized property: '+textt);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Parent {
        public EntityLabel entityLabel {get;set;} 
        public String id {get;set;} 
        public Motif motif {get;set;} 
        public Object mySubscription {get;set;} 
        public String name {get;set;} 
        public String type_Z {get;set;} // in json: type
        public String url {get;set;} 

        public Parent(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String textt = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (textt == 'entityLabel') {
                            entityLabel = new EntityLabel(parser);
                        } else if (textt == 'id') {
                            id = parser.getText();
                        } else if (textt == 'motif') {
                            motif = new Motif(parser);
                        } else if (textt == 'mySubscription') {
                            mySubscription = parser.readValueAs(Object.class);
                        } else if (textt == 'name') {
                            name = parser.getText();
                        } else if (textt == 'type') {
                            type_Z = parser.getText();
                        } else if (textt == 'url') {
                            url = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Parent consuming unrecognized property: '+textt);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class PlatformActionGroups {

        public PlatformActionGroups(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String textt = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        {
                            //System.debug(LoggingLevel.WARN, 'PlatformActionGroups consuming unrecognized property: '+textt);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class ReadBy {
        public Boolean isReadByMe {get;set;} 
        public String lastReadDateByMe {get;set;} 
        public Page_Y page {get;set;} 

        public ReadBy(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String textt = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (textt == 'isReadByMe') {
                            isReadByMe = parser.getBooleanValue();
                        } else if (textt == 'lastReadDateByMe') {
                            lastReadDateByMe = parser.getText();
                        } else if (textt == 'page') {
                            page = new Page_Y(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'ReadBy consuming unrecognized property: '+textt);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Segments {
        public String text {get;set;} 
        public String type_Z {get;set;} // in json: type
        public Object url {get;set;} 
        public String valueType {get;set;} 

        public Segments(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String textt = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (textt == 'text') {
                            text = parser.getText();
                        } else if (textt == 'type') {
                            type_Z = parser.getText();
                        } else if (textt == 'url') {
                            url = parser.readValueAs(Object.class);
                        } else if (textt == 'valueType') {
                            valueType = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Segments consuming unrecognized property: '+textt);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Photo {
        public String fullEmailPhotoUrl {get;set;} 
        public String largePhotoUrl {get;set;} 
        public String mediumPhotoUrl {get;set;} 
        public Object photoVersionId {get;set;} 
        public String smallPhotoUrl {get;set;} 
        public String standardEmailPhotoUrl {get;set;} 
        public String url {get;set;} 

        public Photo(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String textt = parser.getText();
                   
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (textt == 'fullEmailPhotoUrl') {
                            fullEmailPhotoUrl = parser.getText();
                        } else if (textt == 'largePhotoUrl') {
                            largePhotoUrl = parser.getText();
                        } else if (textt == 'mediumPhotoUrl') {
                            mediumPhotoUrl = parser.getText();
                        } else if (textt == 'photoVersionId') {
                            //photoVersionId = parser.readValueAs(Object.class);
                        } else if (textt == 'smallPhotoUrl') {
                            smallPhotoUrl = parser.getText();
                        } else if (textt == 'standardEmailPhotoUrl') {
                            standardEmailPhotoUrl = parser.getText();
                        } else if (textt == 'url') {
                            url = parser.getText();
                        } else {
                            //System.debug(LoggingLevel.WARN, 'Photo consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Page1 {
        public Integer currentPageToken {get;set;} 
        public String currentPageUrl {get;set;} 
        public List<PlatformActionGroups> items {get;set;} 
        public Object nextPageToken {get;set;} 
        public Object nextPageUrl {get;set;} 
        public Object previousPageToken {get;set;} 
        public Object previousPageUrl {get;set;} 
        public Integer total {get;set;} 

        public Page1(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String textt = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (textt == 'currentPageToken') {
                            currentPageToken = parser.getIntegerValue();
                        } else if (textt == 'currentPageUrl') {
                            currentPageUrl = parser.getText();
                        } else if (textt == 'items') {
                            items = arrayOfPlatformActionGroups(parser);
                        } else if (textt == 'nextPageToken') {
                            nextPageToken = parser.readValueAs(Object.class);
                        } else if (textt == 'nextPageUrl') {
                            nextPageUrl = parser.readValueAs(Object.class);
                        } else if (textt == 'previousPageToken') {
                            previousPageToken = parser.readValueAs(Object.class);
                        } else if (textt == 'previousPageUrl') {
                            previousPageUrl = parser.readValueAs(Object.class);
                        } else if (textt == 'total') {
                            total = parser.getIntegerValue();
                        } else {
                            //System.debug(LoggingLevel.WARN, 'Page consuming unrecognized property: '+textt);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Edit {
        public Boolean isEditRestricted {get;set;} 
        public String isEditableByMeUrl {get;set;} 
        public Object lastEditedBy {get;set;} 
        public Object lastEditedDate {get;set;} 
        public Integer latestRevision {get;set;} 
        public Object relativeLastEditedDate {get;set;} 

        public Edit(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String textt = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (textt == 'isEditRestricted') {
                            isEditRestricted = parser.getBooleanValue();
                        } else if (textt == 'isEditableByMeUrl') {
                            isEditableByMeUrl = parser.getText();
                        } else if (textt == 'lastEditedBy') {
                            lastEditedBy = parser.readValueAs(Object.class);
                        } else if (textt == 'lastEditedDate') {
                            lastEditedDate = parser.readValueAs(Object.class);
                        } else if (textt == 'latestRevision') {
                            latestRevision = parser.getIntegerValue();
                        } else if (textt == 'relativeLastEditedDate') {
                            relativeLastEditedDate = parser.readValueAs(Object.class);
                        } else {
                            //System.debug(LoggingLevel.WARN, 'Edit consuming unrecognized property: '+textt);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Actor_Z {
        public String additionalLabel {get;set;} 
        public String communityNickname {get;set;} 
        public Object companyName {get;set;} 
        public String displayName {get;set;} 
        public String firstName {get;set;} 
        public String id {get;set;} 
        public Boolean isActive {get;set;} 
        public Boolean isInThisCommunity {get;set;} 
        public String lastName {get;set;} 
        public Motif motif {get;set;} 
        public Object mySubscription {get;set;} 
        public String name {get;set;} 
        public OutOfOffice outOfOffice {get;set;} 
        public Photo photo {get;set;} 
        public Object reputation {get;set;} 
        public Object title {get;set;} 
        public String type_Z {get;set;} // in json: type
        public String url {get;set;} 
        public String userType {get;set;} 

        public Actor_Z(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String textt = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (textt == 'additionalLabel') {
                            additionalLabel = (String)parser.getText();
                        } else if (textt == 'communityNickname') {
                            communityNickname = parser.getText();
                        } else if (textt == 'companyName') {
                            companyName = parser.readValueAs(Object.class);
                        } else if (textt == 'displayName') {
                            displayName = parser.getText();
                        } else if (textt == 'firstName') {
                            firstName = (String)parser.getText();
                        } else if (textt == 'id') {
                            id = parser.getText();
                        } else if (textt == 'isActive') {
                            isActive = parser.getBooleanValue();
                        } else if (textt == 'isInThisCommunity') {
                            isInThisCommunity = parser.getBooleanValue();
                        } else if (textt == 'lastName') {
                            lastName = parser.getText();
                        } else if (textt == 'motif') {
                            motif = new Motif(parser);
                        } else if (textt == 'mySubscription') {
                            mySubscription = parser.readValueAs(Object.class);
                        } else if (textt == 'name') {
                            name = parser.getText();
                        } else if (textt == 'outOfOffice') {
                            outOfOffice = new OutOfOffice(parser);
                        } else if (textt == 'photo') {
                            photo = new Photo(parser);
                        } else if (textt == 'reputation') {
                            reputation = parser.readValueAs(Object.class);
                        } else if (textt == 'title') {
                            title = parser.readValueAs(Object.class);
                        } else if (textt == 'type') {
                            type_Z = parser.getText();
                        } else if (textt == 'url') {
                            url = parser.getText();
                        } else if (textt == 'userType') {
                            userType = parser.getText();
                        } else {
                            //System.debug(LoggingLevel.WARN, 'Actor_Z consuming unrecognized property: '+textt);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class EntityLabel {
        public String label {get;set;} 
        public String labelPlural {get;set;} 

        public EntityLabel(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String textt = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (textt == 'label') {
                            label = parser.getText();
                        } else if (textt == 'labelPlural') {
                            labelPlural = parser.getText();
                        } else {
                            //System.debug(LoggingLevel.WARN, 'EntityLabel consuming unrecognized property: '+textt);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    public class ClientInfo{
        public String applicationName {get; set;}
        public String applicationUrl {get; set;}
    }
    public class Elements {
        public Actor actor {get;set;} 
        public Body body {get;set;} 
        public Capabilities capabilities {get;set;} 
        public Object clientInfo {get;set;} 
        public String createdDate {get;set;} 
        public Boolean event {get;set;} 
        public String feedElementType {get;set;} 
        public Boolean hasVerifiedComment {get;set;} 
        public Header header {get;set;} 
        public String id {get;set;} 
        public Boolean isDeleteRestricted {get;set;} 
        public Boolean isSharable {get;set;} 
        public String modifiedDate {get;set;} 
        public Object originalFeedItem {get;set;} 
        public Object originalFeedItemActor {get;set;} 
        public Actor parent {get;set;} 
        public String photoUrl {get;set;} 
        public String relativeCreatedDate {get;set;} 
        public String type_Z {get;set;} // in json: type
        public String url {get;set;} 
        public String visibility {get;set;} 

        public Elements(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String textt = parser.getText();            
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (textt == 'actor') {
                            actor = new Actor(parser);
                        } else if (textt == 'body') {
                            body = new Body(parser);
                        } else if (textt == 'capabilities') {
                            capabilities = new Capabilities(parser);
                        } else if (textt == 'clientInfo') {
                            clientInfo = (ClientInfo)parser.readValueAs(ClientInfo.class);
                        } else if (textt == 'createdDate') {
                            createdDate = parser.getText();
                        } else if (textt == 'event') {
                            event = parser.getBooleanValue();
                        } else if (textt == 'feedElementType') {
                            feedElementType = parser.getText();
                        } else if (textt == 'hasVerifiedComment') {
                            hasVerifiedComment = parser.getBooleanValue();
                        } else if (textt == 'header') {
                            header = new Header(parser);
                        } else if (textt == 'id') {
                            id = parser.getText();
                        } else if (textt == 'isDeleteRestricted') {
                            isDeleteRestricted = parser.getBooleanValue();
                        } else if (textt == 'isSharable') {
                            isSharable = parser.getBooleanValue();
                        } else if (textt == 'modifiedDate') {
                            modifiedDate = parser.getText();
                        } else if (textt == 'originalFeedItem') {
                            originalFeedItem = parser.readValueAs(Object.class);
                        } else if (textt == 'originalFeedItemActor') {
                            originalFeedItemActor = parser.readValueAs(Object.class);
                        } else if (textt == 'parent') {
                            parent = new Actor(parser);
                        } else if (textt == 'photoUrl') {
                            photoUrl = parser.getText();
                        } else if (textt == 'relativeCreatedDate') {
                            relativeCreatedDate = parser.getText();
                        } else if (textt == 'type') {
                            type_Z = parser.getText();
                        } else if (textt == 'url') {
                            url = parser.getText();
                        } else if (textt == 'visibility') {
                            visibility = parser.getText();
                        } else {
                            //System.debug(LoggingLevel.WARN, 'Elements consuming unrecognized property: '+textt);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class ChatterLikes {
        public Boolean isLikedByCurrentUser {get;set;} 
        public Object likesMessage {get;set;} 
        public Object myLike {get;set;} 
        public Page1 page1 {get;set;} 

        public ChatterLikes(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String textt = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (textt == 'isLikedByCurrentUser') {
                            isLikedByCurrentUser = parser.getBooleanValue();
                        } else if (textt == 'likesMessage') {
                            likesMessage = parser.readValueAs(Object.class);
                        } else if (textt == 'myLike') {
                            myLike = parser.readValueAs(Object.class);
                        } else if (textt == 'page') {
                            page1 = new Page1(parser);
                        } else {
                            //System.debug(LoggingLevel.WARN, 'ChatterLikes consuming unrecognized property: '+textt);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Verified {
        public Boolean isVerifiableByMe {get;set;} 
        public Boolean isVerified {get;set;} 
        public Object isVerifiedByAnonymized {get;set;} 
        public Object lastVerifiedByUser {get;set;} 
        public Object lastVerifiedDate {get;set;} 

        public Verified(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String textt = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (textt == 'isVerifiableByMe') {
                            isVerifiableByMe = parser.getBooleanValue();
                        } else if (textt == 'isVerified') {
                            isVerified = parser.getBooleanValue();
                        } else if (textt == 'isVerifiedByAnonymized') {
                            isVerifiedByAnonymized = parser.readValueAs(Object.class);
                        } else if (textt == 'lastVerifiedByUser') {
                            lastVerifiedByUser = parser.readValueAs(Object.class);
                        } else if (textt == 'lastVerifiedDate') {
                            lastVerifiedDate = parser.readValueAs(Object.class);
                        } else {
                            //System.debug(LoggingLevel.WARN, 'Verified consuming unrecognized property: '+textt);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class TrackedChanges {
        public List<Changes> changes {get;set;} 

        public TrackedChanges(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String textt = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (textt == 'changes') {
                            changes = arrayOfChanges(parser);
                        } else {
                            //System.debug(LoggingLevel.WARN, 'TrackedChanges consuming unrecognized property: '+textt);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class ReadBy_Z {
        public Boolean isReadByMe {get;set;} 
        public String lastReadDateByMe {get;set;} 
        public Page_Z page {get;set;} 

        public ReadBy_Z(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String textt = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (textt == 'isReadByMe') {
                            isReadByMe = parser.getBooleanValue();
                        } else if (textt == 'lastReadDateByMe') {
                            lastReadDateByMe = parser.getText();
                        } else if (textt == 'page') {
                            page = new Page_Z(parser);
                        } else {
                            //System.debug(LoggingLevel.WARN, 'ReadBy_Z consuming unrecognized property: '+textt);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Actor {
        public Object additionalLabel {get;set;} 
        public String communityNickname {get;set;} 
        public Object companyName {get;set;} 
        public String displayName {get;set;} 
        public Object firstName {get;set;} 
        public String id {get;set;} 
        public Boolean isActive {get;set;} 
        public Boolean isInThisCommunity {get;set;} 
        public String lastName {get;set;} 
        public Motif motif {get;set;} 
        public Object mySubscription {get;set;} 
        public String name {get;set;} 
        public OutOfOffice outOfOffice {get;set;} 
        public Photo photo {get;set;} 
        public Object reputation {get;set;} 
        public Object title {get;set;} 
        public String type_Z {get;set;} // in json: type
        public String url {get;set;} 
        public String userType {get;set;} 

        public Actor(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String textt = parser.getText();
                    try{
                        if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (textt == 'additionalLabel') {
                            additionalLabel = parser.getText();
                        } else if (textt == 'communityNickname') {
                            communityNickname = parser.getText();
                        } else if (textt == 'companyName') {
                            companyName = parser.readValueAs(Object.class);
                        } else if (textt == 'displayName') {
                            displayName = parser.getText();
                        } else if (textt == 'firstName') {
                            firstName = (String)parser.getText();
                            
                        } else if (textt == 'id') {
                            id = parser.getText();
                        } else if (textt == 'isActive') {
                            isActive = parser.getBooleanValue();
                        } else if (textt == 'isInThisCommunity') {
                            isInThisCommunity = parser.getBooleanValue();
                        } else if (textt == 'lastName') {
                            lastName = parser.getText();
                        } else if (textt == 'motif') {
                            motif = new Motif(parser);
                        } else if (textt == 'mySubscription') {
                            mySubscription = parser.readValueAs(Object.class);
                        } else if (textt == 'name') {
                            name = parser.getText();
                        } else if (textt == 'outOfOffice') {
                            outOfOffice = new OutOfOffice(parser);
                        } else if (textt == 'photo') {
                            photo = new Photo(parser);
                        } else if (textt == 'reputation') {
                            reputation = parser.readValueAs(Object.class);
                        } else if (textt == 'title') {
                            title = parser.readValueAs(Object.class);
                        } else if (textt == 'type') {
                            type_Z = parser.getText();
                        } else if (textt == 'url') {
                            url = parser.getText();
                        } else if (textt == 'userType') {
                            userType = parser.getText();
                        } else {
                            //System.debug(LoggingLevel.WARN, 'Actor consuming unrecognized property: '+textt);
                            consumeObject(parser);
                        }
                    }
                    }catch(Exception e){
                        Apexpages.addMessage(new ApexPages.message(ApexPages.Severity.ERROR, textt));
                    }
                }
            }
        }
    }
    
    public class Items {
        public String lastReadDateByUser {get;set;} 
        public User user {get;set;} 

        public Items(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String textt = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (textt == 'lastReadDateByUser') {
                            lastReadDateByUser = parser.getText();
                        } else if (textt == 'user') {
                            user = new User(parser);
                        } else {
                            //System.debug(LoggingLevel.WARN, 'Items consuming unrecognized property: '+textt);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Body {
        public Boolean isRichText {get;set;} 
        public List<MessageSegments> messageSegments {get;set;} 
        public String text {get;set;} 

        public Body(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String textt = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (textt == 'isRichText') {
                            isRichText = parser.getBooleanValue();
                        } else if (textt == 'messageSegments') {
                            messageSegments = arrayOfMessageSegments(parser);
                        } else if (textt == 'text') {
                            System.debug('$#####################   '+ parser.getText());
                            this.text = parser.getText();
                        } else {
                            //System.debug(LoggingLevel.WARN, 'Body consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Mute {
        public Object isMutedByMe {get;set;} 

        public Mute(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String textt = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (textt == 'isMutedByMe') {
                            isMutedByMe = parser.readValueAs(Object.class);
                        } else {
                            //System.debug(LoggingLevel.WARN, 'Mute consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Status {
        public String feedEntityStatus {get;set;} 
        public Boolean isApprovableByMe {get;set;} 

        public Status(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String textt = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (textt == 'feedEntityStatus') {
                            feedEntityStatus = parser.getText();
                        } else if (textt == 'isApprovableByMe') {
                            isApprovableByMe = parser.getBooleanValue();
                        } else {
                            //System.debug(LoggingLevel.WARN, 'Status consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Items_Z {
        
        public Capabilities_Y capabilities {get;set;} 
        public Object clientInfo {get;set;} 
        public String createdDate {get;set;} 
        public Reference feedElement {get;set;} 
        public String id {get;set;} 
        public Boolean isDeleteRestricted {get;set;} 
        public Page_Z likes {get;set;} 
        public Object likesMessage {get;set;} 
        public Object moderationFlags {get;set;} 
        public Object myLike {get;set;} 
        public Reference parent {get;set;} 
        public String relativeCreatedDate {get;set;} 
        public Integer threadLevel {get;set;} 
        public Object threadParentId {get;set;} 
        public String type_Z {get;set;} // in json: type
        public String url {get;set;} 
        public User user {get;set;} 

        public Items_Z(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String textt = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (textt == 'capabilities') {
                            capabilities = new Capabilities_Y(parser);
                        } else if (textt == 'clientInfo') {
                            clientInfo = parser.readValueAs(Object.class);
                        } else if (textt == 'createdDate') {
                            createdDate = parser.getText();
                        } else if (textt == 'feedElement') {
                            feedElement = new Reference(parser);
                        } else if (textt == 'id') {
                            id = parser.getText();
                        } else if (textt == 'isDeleteRestricted') {
                            isDeleteRestricted = parser.getBooleanValue();
                        } else if (textt == 'likes') {
                            likes = new Page_Z(parser);
                        } else if (textt == 'likesMessage') {
                            likesMessage = parser.readValueAs(Object.class);
                        } else if (textt == 'moderationFlags') {
                            moderationFlags = parser.readValueAs(Object.class);
                        } else if (textt == 'myLike') {
                            myLike = parser.readValueAs(Object.class);
                        } else if (textt == 'parent') {
                            parent = new Reference(parser);
                        } else if (textt == 'relativeCreatedDate') {
                            relativeCreatedDate = parser.getText();
                        } else if (textt == 'threadLevel') {
                            threadLevel = parser.getIntegerValue();
                        } else if (textt == 'threadParentId') {
                            threadParentId = parser.readValueAs(Object.class);
                        } else if (textt == 'type') {
                            type_Z = parser.getText();
                        } else if (textt == 'url') {
                            url = parser.getText();
                        } else if (textt == 'user') {
                            user = new User(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'Items_Z consuming unrecognized property: '+textt);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Changes {
        public String fieldName {get;set;} 
        public String newValue {get;set;} 
        public String oldValue {get;set;} 

        public Changes(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String textt = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (textt == 'fieldName') {
                            fieldName = parser.getText();
                        } else if (textt == 'newValue') {
                            newValue = parser.getText();
                        } else if (textt == 'oldValue') {
                            oldValue = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Changes consuming unrecognized property: '+textt);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Topics {
        public Boolean canAssignTopics {get;set;} 
        public List<PlatformActionGroups> items {get;set;} 

        public Topics(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String textt = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (textt == 'canAssignTopics') {
                            canAssignTopics = parser.getBooleanValue();
                        } else if (textt == 'items') {
                            items = arrayOfPlatformActionGroups(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'Topics consuming unrecognized property: '+textt);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Comments {
        public Page_Z page {get;set;} 

        public Comments(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String textt = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (textt == 'page') {
                            page = new Page_Z(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'Comments consuming unrecognized property: '+textt);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Reference {
        public String id {get;set;} 
        public String url {get;set;} 

        public Reference(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String textt = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (textt == 'id') {
                            id = parser.getText();
                        } else if (textt == 'url') {
                            url = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Reference consuming unrecognized property: '+textt);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Capabilities_Y {
        public Edit edit {get;set;} 
        public Status status {get;set;} 
        public UpDownVote upDownVote {get;set;} 
        public Verified verified {get;set;} 

        public Capabilities_Y(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String textt = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (textt == 'edit') {
                            edit = new Edit(parser);
                        } else if (textt == 'status') {
                            status = new Status(parser);
                        } else if (textt == 'upDownVote') {
                            upDownVote = new UpDownVote(parser);
                        } else if (textt == 'verified') {
                            verified = new Verified(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'Capabilities_Y consuming unrecognized property: '+textt);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Capabilities_Z {
        public AssociatedActions associatedActions {get;set;} 
        public Bookmarks bookmarks {get;set;} 
        public ChatterLikes chatterLikes {get;set;} 
        public Close close {get;set;} 
        public Comments comments {get;set;} 
        public Edit edit {get;set;} 
        public Interactions interactions {get;set;} 
        public Mute mute {get;set;} 
        public ReadBy_Z readBy {get;set;} 
        public Status status {get;set;} 
        public Topics topics {get;set;} 
        public UpDownVote upDownVote {get;set;} 

        public Capabilities_Z(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String textt = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (textt == 'associatedActions') {
                            associatedActions = new AssociatedActions(parser);
                        } else if (textt == 'bookmarks') {
                            bookmarks = new Bookmarks(parser);
                        } else if (textt == 'chatterLikes') {
                            chatterLikes = new ChatterLikes(parser);
                        } else if (textt == 'close') {
                            close = new Close(parser);
                        } else if (textt == 'comments') {
                            comments = new Comments(parser);
                        } else if (textt == 'edit') {
                            edit = new Edit(parser);
                        } else if (textt == 'interactions') {
                            interactions = new Interactions(parser);
                        } else if (textt == 'mute') {
                            mute = new Mute(parser);
                        } else if (textt == 'readBy') {
                            readBy = new ReadBy_Z(parser);
                        } else if (textt == 'status') {
                            status = new Status(parser);
                        } else if (textt == 'topics') {
                            topics = new Topics(parser);
                        } else if (textt == 'upDownVote') {
                            upDownVote = new UpDownVote(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'Capabilities_Z consuming unrecognized property: '+textt);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Body_X {
        public Boolean isRichText {get;set;} 
        public List<MessageSegments_X> messageSegments {get;set;} 
        public String text {get;set;} 

        public Body_X(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String textt = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (textt == 'isRichText') {
                            isRichText = parser.getBooleanValue();
                        } else if (textt == 'messageSegments') {
                            messageSegments = arrayOfMessageSegments_X(parser);
                        } else if (textt == 'text') {
                            text = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Body_X consuming unrecognized property: '+textt);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Header {
        public Object isRichText {get;set;} 
        public List<MessageSegments_Z> messageSegments {get;set;} 
        public String text {get;set;} 

        public Header(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String textt = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (textt == 'isRichText') {
                            isRichText = parser.readValueAs(Object.class);
                        } else if (textt == 'messageSegments') {
                            messageSegments = arrayOfMessageSegments_Z(parser);
                        } else if (textt == 'text') {
                            text = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Header consuming unrecognized property: '+textt);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Capabilities {
        public AssociatedActions associatedActions {get;set;} 
        public Bookmarks bookmarks {get;set;} 
        public ChatterLikes chatterLikes {get;set;} 
        public Close close {get;set;} 
        public Comments comments {get;set;} 
        public Edit edit {get;set;} 
        public Interactions interactions {get;set;} 
        public Mute mute {get;set;} 
        public ReadBy readBy {get;set;} 
        public Status status {get;set;} 
        public Topics topics {get;set;} 
        public UpDownVote upDownVote {get;set;} 

        public Capabilities(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String textt = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (textt == 'associatedActions') {
                            associatedActions = new AssociatedActions(parser);
                        } else if (textt == 'bookmarks') {
                            bookmarks = new Bookmarks(parser);
                        } else if (textt == 'chatterLikes') {
                            chatterLikes = new ChatterLikes(parser);
                        } else if (textt == 'close') {
                            close = new Close(parser);
                        } else if (textt == 'comments') {
                            comments = new Comments(parser);
                        } else if (textt == 'edit') {
                            edit = new Edit(parser);
                        } else if (textt == 'interactions') {
                            interactions = new Interactions(parser);
                        } else if (textt == 'mute') {
                            mute = new Mute(parser);
                        } else if (textt == 'readBy') {
                            readBy = new ReadBy(parser);
                        } else if (textt == 'status') {
                            status = new Status(parser);
                        } else if (textt == 'topics') {
                            topics = new Topics(parser);
                        } else if (textt == 'upDownVote') {
                            upDownVote = new UpDownVote(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'Capabilities consuming unrecognized property: '+textt);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
        
    public class Body_Y {
        public Object isRichText {get;set;} 
        public List<PlatformActionGroups> messageSegments {get;set;} 
        public Object text {get;set;} 

        public Body_Y(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String textt = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (textt == 'isRichText') {
                            isRichText = parser.readValueAs(Object.class);
                        } else if (textt == 'messageSegments') {
                            messageSegments = arrayOfPlatformActionGroups(parser);
                        } else if (textt == 'text') {
                            text =(String)parser.readValueAs(Object.class);
                        } else {
                            System.debug(LoggingLevel.WARN, 'Body_Y consuming unrecognized property: '+textt);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class UpDownVote {
        public Integer downVoteCount {get;set;} 
        public String myVote {get;set;} 
        public Integer upVoteCount {get;set;} 

        public UpDownVote(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String textt = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (textt == 'downVoteCount') {
                            downVoteCount = parser.getIntegerValue();
                        } else if (textt == 'myVote') {
                            myVote = parser.getText();
                        } else if (textt == 'upVoteCount') {
                            upVoteCount = parser.getIntegerValue();
                        } else {
                            System.debug(LoggingLevel.WARN, 'UpDownVote consuming unrecognized property: '+textt);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Capabilities_X {
        public AssociatedActions associatedActions {get;set;} 
        public Bookmarks bookmarks {get;set;} 
        public ChatterLikes chatterLikes {get;set;} 
        public Close close {get;set;} 
        public Comments_Z comments {get;set;} 
        public Edit edit {get;set;} 
        public Interactions interactions {get;set;} 
        public Mute mute {get;set;} 
        public ReadBy readBy {get;set;} 
        public Topics topics {get;set;} 
        public TrackedChanges trackedChanges {get;set;} 

        public Capabilities_X(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String textt = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (textt == 'associatedActions') {
                            associatedActions = new AssociatedActions(parser);
                        } else if (textt == 'bookmarks') {
                            bookmarks = new Bookmarks(parser);
                        } else if (textt == 'chatterLikes') {
                            chatterLikes = new ChatterLikes(parser);
                        } else if (textt == 'close') {
                            close = new Close(parser);
                        } else if (textt == 'comments') {
                            comments = new Comments_Z(parser);
                        } else if (textt == 'edit') {
                            edit = new Edit(parser);
                        } else if (textt == 'interactions') {
                            interactions = new Interactions(parser);
                        } else if (textt == 'mute') {
                            mute = new Mute(parser);
                        } else if (textt == 'readBy') {
                            readBy = new ReadBy(parser);
                        } else if (textt == 'topics') {
                            topics = new Topics(parser);
                        } else if (textt == 'trackedChanges') {
                            trackedChanges = new TrackedChanges(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'Capabilities_X consuming unrecognized property: '+textt);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Close {
        public Boolean canContextUserUpdateIsClosed {get;set;} 
        public Boolean isClosed {get;set;} 

        public Close(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String textt = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (textt == 'canContextUserUpdateIsClosed') {
                            canContextUserUpdateIsClosed = parser.getBooleanValue();
                        } else if (textt == 'isClosed') {
                            isClosed = parser.getBooleanValue();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Close consuming unrecognized property: '+textt);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class OutOfOffice {
        public String message {get;set;} 

        public OutOfOffice(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String textt = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (textt == 'message') {
                            message = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'OutOfOffice consuming unrecognized property: '+textt);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Interactions {
        public Integer count {get;set;} 

        public Interactions(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String textt = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (textt == 'count') {
                            count = parser.getIntegerValue();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Interactions consuming unrecognized property: '+textt);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class MessageSegments_X {
        public String text {get;set;} 
        public String type_Z {get;set;} // in json: type
        public Boolean accessible {get;set;} 
        public String name {get;set;} 
        public User record {get;set;} 

        public MessageSegments_X(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String textt = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (textt == 'text') {
                            text = parser.getText();
                        } else if (textt == 'type') {
                            type_Z = parser.getText();
                        } else if (textt == 'accessible') {
                            accessible = parser.getBooleanValue();
                        } else if (textt == 'name') {
                            name = parser.getText();
                        } else if (textt == 'record') {
                            record = new User(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'MessageSegments_X consuming unrecognized property: '+textt);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Motif {
        public String color {get;set;} 
        public String largeIconUrl {get;set;} 
        public String mediumIconUrl {get;set;} 
        public String smallIconUrl {get;set;} 
        public Object svgIconUrl {get;set;} 

        public Motif(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String textt = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (textt == 'color') {
                            color = parser.getText();
                        } else if (textt == 'largeIconUrl') {
                            largeIconUrl = parser.getText();
                        } else if (textt == 'mediumIconUrl') {
                            mediumIconUrl = parser.getText();
                        } else if (textt == 'smallIconUrl') {
                            smallIconUrl = parser.getText();
                        } else if (textt == 'svgIconUrl') {
                            svgIconUrl = parser.readValueAs(Object.class);
                        } else {
                            System.debug(LoggingLevel.WARN, 'Motif consuming unrecognized property: '+textt);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class AssociatedActions {
        public List<PlatformActionGroups> platformActionGroups {get;set;} 

        public AssociatedActions(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String textt = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (textt == 'platformActionGroups') {
                            platformActionGroups = arrayOfPlatformActionGroups(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'AssociatedActions consuming unrecognized property: '+textt);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class MessageSegments_Z {
        public Motif motif {get;set;} 
        public Reference reference {get;set;} 
        public String text {get;set;} 
        public String type_Z {get;set;} // in json: type
        public List<Segments> segments {get;set;} 

        public MessageSegments_Z(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String textt = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (textt == 'motif') {
                            motif = new Motif(parser);
                        } else if (textt == 'reference') {
                            reference = new Reference(parser);
                        } else if (textt == 'text') {
                            text = parser.getText();
                        } else if (textt == 'type') {
                            type_Z = parser.getText();
                        } else if (textt == 'segments') {
                            segments = arrayOfSegments(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'MessageSegments_Z consuming unrecognized property: '+textt);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    
    public static ChatterJson parse(String json) {
        System.JSONParser parser = System.JSON.createParser(json);
        return new ChatterJson(parser);
    }
    
    public static void consumeObject(System.JSONParser parser) {
        Integer depth = 0;
        do {
            System.JSONToken curr = parser.getCurrentToken();
            if (curr == System.JSONToken.START_OBJECT || 
                curr == System.JSONToken.START_ARRAY) {
                depth++;
            } else if (curr == System.JSONToken.END_OBJECT ||
                curr == System.JSONToken.END_ARRAY) {
                depth--;
            }
        } while (depth > 0 && parser.nextToken() != null);
    }
    





    private static List<PlatformActionGroups> arrayOfPlatformActionGroups(System.JSONParser p) {
        List<PlatformActionGroups> res = new List<PlatformActionGroups>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new PlatformActionGroups(p));
        }
        return res;
    }


    private static List<Items_Z> arrayOfItems_Z(System.JSONParser p) {
        List<Items_Z> res = new List<Items_Z>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Items_Z(p));
        }
        return res;
    }




    private static List<Items> arrayOfItems(System.JSONParser p) {
        List<Items> res = new List<Items>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Items(p));
        }
        return res;
    }

    private static List<MessageSegments> arrayOfMessageSegments(System.JSONParser p) {
        List<MessageSegments> res = new List<MessageSegments>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new MessageSegments(p));
        }
        return res;
    }


    private static List<Elements> arrayOfElements(System.JSONParser p) {
        System.debug(p);
        List<Elements> res = new List<Elements>();
        try{
            if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Elements(p));
        }
        }catch(Exception e){
            apexpages.addMessage(new ApexPages.message(apexPages.Severity.ERROR, e.getTypeName() + e.getStackTraceString()));
        }
        
        return res;
    }





    private static List<MessageSegments_Z> arrayOfMessageSegments_Z(System.JSONParser p) {
        List<MessageSegments_Z> res = new List<MessageSegments_Z>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new MessageSegments_Z(p));
        }
        return res;
    }



    private static List<Segments> arrayOfSegments(System.JSONParser p) {
        List<Segments> res = new List<Segments>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Segments(p));
        }
        return res;
    }


    private static List<MessageSegments_X> arrayOfMessageSegments_X(System.JSONParser p) {
        List<MessageSegments_X> res = new List<MessageSegments_X>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new MessageSegments_X(p));
        }
        return res;
    }


    private static List<Changes> arrayOfChanges(System.JSONParser p) {
        List<Changes> res = new List<Changes>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Changes(p));
        }
        return res;
    }

}